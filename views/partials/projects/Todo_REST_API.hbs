<h2><a href="https://jskipp-todo-rest-api.herokuapp.com/">Todo REST API</a> </h2>
<div class="list-group-item">
  <div class="container-fluid">
    <h3><a href="https://github.com/jamesskipp/node-todo-api">Todo REST API
      on GitHub</a></h3>
    <div class="container-fluid">
      <div class="text-projects">
        <h4>Description:</h4>
        <p>This project is a REST API for maintaining a database of
        todos. The API has user post, get, and delete paths, as well as
        post, get, delete, and patch paths for todos. </p>
        <h4>Technical Details:</h4>
        <p>This is a Node.js <a href="https://www.npmjs.com/package/express">
        Express</a> app using <a href="https://www.mongodb.com/">MongoDB
        </a>. I used <a href="https://www.npmjs.com/package/mongoose">Mongoose</a>
        to interact with the database. Authentication was handled by
        <a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a>,
        and <a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a>.
        Testing was done with <a href="https://www.npmjs.com/package/mocha">
        Mocha</a>, <a href="https://www.npmjs.com/package/supertest">supertest</a>,
        and <a href="https://www.npmjs.com/package/expect">expect</a>.
        Additional development tools included <a href="https://www.getpostman.com/">Postman</a>
        for managing API requests, <a href="https://robomongo.org/">Robo
        3T (formerly Robomongo)</a> for database queries, and
        <a href="https://eslint.org/">ESLint</a> for code linting.
        The app is hosted on <a href="https://www.heroku.com/">Heroku</a>.</p>
        <h4>My Contribution:</h4>
        <p>I am the sole contributor, but it is partially based on the tutorial provided as part
        of a Node.js Developer course written by Andrew Mead.</p>
      </div>
    </div>
  </div>
</div>
